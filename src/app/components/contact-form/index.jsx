"use client";
import { useState } from "react";

const ContactForm = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    theme: "",
    message: "",
  });
  const [loading, setLoading] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);

  const BOT_TOKEN = "7659209731:AAGOcMGuCudyyHGo8J_ebOaie2CPyrJIy98"; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  const CHAT_ID = "6207044781"; // –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞
  const API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    const message = `üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*

üë§ *–ò–º—è:* ${formData.name}
üìß *Email:* ${formData.email}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}
üëâ *–¢–µ–º–∞:* ${formData.theme}
üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${formData.message}`;

    try {
      const response = await fetch(API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: CHAT_ID, text: message, parse_mode: "Markdown" }),
      });

      if (response.ok) {
        setModalOpen(true);
        setFormData({ name: "", email: "", phone: "", theme: "", message: "" });
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      }
    } catch (error) {
      alert("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.");
    }

    setLoading(false);
  };

  return (
    <div className="max-w-lg mx-auto p-6 bg-white shadow-lg rounded-lg">
      <h2 className="text-2xl font-bold text-center mb-4">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          name="name"
          placeholder="–í–∞—à–µ –∏–º—è"
          value={formData.name}
          onChange={handleChange}
          required
          className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <input
          type="email"
          name="email"
          placeholder="–í–∞—à email"
          value={formData.email}
          onChange={handleChange}
          required
          className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <input
          type="tel"
          name="phone"
          placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
          value={formData.phone}
          onChange={handleChange}
          required
          className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <input
          type="text"
          name="theme"
          placeholder="–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"
          value={formData.theme}
          onChange={handleChange}
          required
          className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <textarea
          name="message"
          placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
          value={formData.message}
          onChange={handleChange}
          required
          rows="4"
          className="w-full h-[150px] md:h-[200px] resize-none p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        ></textarea>
        <button
          type="submit"
          className="w-full bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600 transition duration-300"
          disabled={loading}
        >
          {loading ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
        </button>
      </form>

      {modalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg shadow-lg text-center  w-[80%] sm:w-[70%] md:w-[40%] lg:w-[30%] xl:w-[25%]">
            <h3 className="text-xl font-bold mb-2">–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</h3>
            <p className="text-gray-600">–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
            <button
              onClick={() => setModalOpen(false)}
              className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300"
            >
              –°–ø–∞—Å–∏–±–æ, –ü–æ–Ω—è—Ç–Ω–æ
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ContactForm;
